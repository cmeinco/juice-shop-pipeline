pipeline {

    /* code: https://github.com/bkimminich/juice-shop */

    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
    }
    // triggers { pollSCM('@daily') }
    
    /*
    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')

        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')

        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')

        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')

        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    }
    */
    
    stages {
        stage('Prep') {
            steps {
                echo 'Building at ${WORKSPACE}'
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/cmeinco/juice-shop-pipeline']]]
                 
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/bkimminich/juice-shop']]]
                script {
                    def browsers = ['chrome', 'firefox']
                    for (int i = 0; i < browsers.size(); ++i) {
                        echo "Testing the ${browsers[i]} browser"
                    }
                }
                echo 'hello npm'
                sh 'npm --version'
            }
        }
        stage('Build') {
            steps {
                sh 'npm install'
                sh 'npm test'
                sh 'npm run package:ci'

            }
        }
        stage('Security Source Code Analysis') {
            steps {
                sh 'echo SCA'

                sh 'echo SAST'

                echo 'evaluating output'
            }
        }
        stage('Functional Testing') {
            steps {
                sh 'echo hello'
            }
        }
        stage('Security DAST') {
            steps {
                sh 'echo hello'
            }
        }
        stage('Stage for Prod Release') {
            steps {
                sh 'echo hello'
            }
        }
        stage('Prod Roll') {
            steps {
                sh 'echo hello'
            }
        }
    }
        
    post { 
        always { 
            echo 'I will always say Hello again!'
            archiveArtifacts artifacts: 'dist/*.zip', fingerprint: true, allowEmptyArchive: false
        }
        success {
          echo "Yay, we passed."
        }
        failure {
          echo "Boo, we failed."
        }
    }
   
}
