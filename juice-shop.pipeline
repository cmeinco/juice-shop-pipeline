pipeline {

    /* code: https://github.com/bkimminich/juice-shop */

    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
    }
    // triggers { pollSCM('@daily') }
    
    /*
    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')

        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')

        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')

        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')

        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    }
    */
    
    stages {
        stage('Prep') {
            steps {
                echo "Building at ${WORKSPACE}"
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/cmeinco/juice-shop-pipeline']]]
                
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/bkimminich/juice-shop']]]
                script {
                    def browsers = ['chrome', 'firefox']
                    for (int i = 0; i < browsers.size(); ++i) {
                        echo "Testing the ${browsers[i]} browser"
                    }
                }
                echo 'hello npm'
                sh 'npm --version'
                sh 'node -v'
            }
            post { 
                success { 
                    echo 'I will always say Hello again!'
                    archiveArtifacts artifacts: 'package-lock.json,dist/*.zip', fingerprint: true, allowEmptyArchive: false
                }
            }
        }
        stage('Build') {
            steps {
                sh 'npm install'
                // need to run unit tests, not full test package every build, look into this
                // sh 'npm test' 
                sh 'npm run package:ci'
            }
            post { 
                success { 
                    sh 'npm install --package-lock'
                    archiveArtifacts artifacts: 'dist/*.zip', fingerprint: true, allowEmptyArchive: false
                }
            }
        }
        stage('[Security] Source Code Testing') {
            steps {
            
                sh 'echo SCA'
                // uses npm audit to detect and npm-audit-resolve to manage findings
                // verify check audit is installed, if not, need to install it. (is the the right place?)
                sh '''
                pwd
                ls -ltra
                '''
                sh 'cp ../juice-shop@script/audit-resolve.json .'
                sh 'check-audit'
                

                sh 'echo SAST'
                echo "=========== SAST ================"
                echo "${WORKSPACE}"
                
                // where does this get a debug build from?
                // semgrep?
                

                echo 'evaluating output'
                // prob should be done at every step; maybe here sign the artifacts / package up for our s00p3rspecial security org?
                
            }
        }
        stage('Deploy to Dev'){
            environment {
                APPSERVER="192.168.1.211"
                DEPLOY_LOCATION="/opt/juice-shop-test"
                DEPLOY_SERVICENAME="juiceshop-test.service"
            }
            steps {
                sh '''
                    cd dist
                    scp ./*.zip appuser@${APPSERVER}:${DEPLOY_LOCATION}/
                    cat *.md5
                    echo .
                    ssh appuser@${APPSERVER} "md5sum ${DEPLOY_LOCATION}/*.zip"
                '''
                // todo: appuser should have access to restart services, check sudoers
                sh '''
                    ssh appuser@${APPSERVER} "md5sum ${DEPLOY_LOCATION}/*.zip"
                    ssh appuser@${APPSERVER} "sudo systemctl stop ${DEPLOY_SERVICENAME}"
                    ssh appuser@${APPSERVER} "cd ${DEPLOY_LOCATION}/;rm -rf juice-shop-app;unzip *.zip;rm *.zip;mv -fv juice-shop_* juice-shop-app"
                    ssh appuser@${APPSERVER} "sudo systemctl start ${DEPLOY_SERVICENAME}"
                '''

            }
        }
        stage('Functional Testing') {
            steps {
                sh 'npm test'
            }
        }
        stage('[Security] \nRuntime <br/>Testing') {
            steps {
                sh 'echo hello'
                echo "DAST"
                echo "IAST"
                echo "PenTest? What you mean automated pen test? u going crazy?"
            }
        }
        
        stage('Promote Release Candidate'){
            environment {
                APPSERVER="192.168.1.211"
                DEPLOY_LOCATION="/opt/juice-shop"
            }
            steps {
                sh '''
                    cd dist
                    scp ./*.zip appuser@${APPSERVER}:${DEPLOY_LOCATION}/
                    cat *.md5
                    echo .
                    ssh appuser@${APPSERVER} 'md5sum ${DEPLOY_LOCATION}/*.zip'
                '''
                // u compare the outputs, should match...
            }
        }
        // maybe wait here for something?  change window?  // low volume  // blue green?
        stage('Prod Roll') {
            steps {
                sh 'echo hello'
            }
        }
    }
        
    post { 
        always { 
            echo 'I will always say Hello again!'
        }
        success {
          echo "Yay, we passed."
        }
        failure {
          echo "Boo, we failed."
        }
    }
   
}
